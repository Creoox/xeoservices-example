/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/process": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * createOne
         * @description Create and start the conversion process.
         */
        post: operations["ProcessController_createOne"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/process/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * getOne
         * @description Get process entry by ID.
         */
        get: operations["ProcessController_getOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * check
         * @description Check the health of the service
         */
        get: operations["HealthController_check"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ProcessCreateResponse: {
            /**
             * Format: uuid
             * @description The ID of created process
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
        };
        ProcessOutputResponse: {
            /**
             * Format: uuid
             * @description The ID of process output
             */
            id: string;
            /** @description File name */
            fileName: string;
            /**
             * @description File type
             * @enum {string}
             */
            fileType: "xkt" | "ifc" | "glb" | "bim" | "las" | "stl" | "obj" | "mtl" | "zip" | "json" | "log" | "db";
            /** @description File size */
            fileSize: number;
            /**
             * Format: url
             * @description Url of the process output
             */
            url: string;
            /**
             * Format: date-time
             * @description Updated at
             */
            updatedAt: string;
            /**
             * Format: date-time
             * @description Created at
             */
            createdAt: string;
        };
        ProcessEntryResponse: {
            /**
             * Format: uuid
             * @description The ID of the process
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /** @description Process outputs */
            processOutputs: components["schemas"]["ProcessOutputResponse"][];
            /**
             * @description Process status
             * @enum {string}
             */
            status: "process_created" | "process_started" | "process_preparing" | "process_converting" | "process_finalizing" | "process_completed" | "process_error";
            /**
             * @description Process type
             * @enum {string}
             */
            type: "glb-xkt" | "ifc-xkt" | "zip-extract" | "ifc-ids-validate" | "ifc-model-check";
            /**
             * Format: url
             * @description Direct link to show model in viewer
             */
            viewerUrl?: string;
            /**
             * Format: date-time
             * @description Updated at
             */
            updatedAt: string;
            /**
             * Format: date-time
             * @description Created at
             */
            createdAt: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    ProcessController_createOne: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Type of the conversion process
                     * @enum {string}
                     */
                    type: "glb-xkt" | "ifc-xkt" | "zip-extract" | "ifc-ids-validate" | "ifc-model-check";
                    /**
                     * Format: uri
                     * @description The URL of the input file
                     */
                    downloadUrl: string;
                    /** @description The HTTP webhook to send events to */
                    eventsWebhook?: {
                        /**
                         * Format: uri
                         * @description The URL to send events to
                         */
                        url: string;
                        /**
                         * @description The HTTP method to use
                         * @enum {string}
                         */
                        method?: "POST" | "GET" | "PUT" | "DELETE" | "PATCH";
                        /** @description The HTTP headers to send */
                        headers?: {
                            [key: string]: string;
                        };
                    };
                    /**
                     * Format: uri
                     * @description The URL of the input file against which to validate the IFC file
                     */
                    downloadValidateUrl?: string;
                };
            };
        };
        responses: {
            /** @description The conversion process was started */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessCreateResponse"];
                };
            };
        };
    };
    ProcessController_getOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the process */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The process entry */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessEntryResponse"];
                };
            };
        };
    };
    HealthController_check: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Health Check is successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example ok */
                        status?: string;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       }
                         *     } */
                        info?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        } | null;
                        /** @example {} */
                        error?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        } | null;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       }
                         *     } */
                        details?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        };
                    };
                };
            };
            /** @description The Health Check is not successful */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example error */
                        status?: string;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       }
                         *     } */
                        info?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        } | null;
                        /** @example {
                         *       "redis": {
                         *         "status": "down",
                         *         "message": "Could not connect"
                         *       }
                         *     } */
                        error?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        } | null;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       },
                         *       "redis": {
                         *         "status": "down",
                         *         "message": "Could not connect"
                         *       }
                         *     } */
                        details?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        };
                    };
                };
            };
        };
    };
}
