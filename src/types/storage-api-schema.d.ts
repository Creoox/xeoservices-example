/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare File Upload
         * @description
         *     Creates a new `File Upload` object, generating a unique ID and pre-assigned URLs for uploading the file. Depending on whether a single-part or multi-part upload is requested, the response includes:
         *
         *     - **Single-Part Upload**:
         *       - A single pre-assigned upload URL.
         *
         *     - **Multi-Part Upload**:
         *       - Multiple pre-assigned upload URLs (one for each part).
         *       - An `uploadId` required for completing the upload.
         *
         *     ### Usage Scenarios
         *
         *     1. **Single-Part Upload**:
         *        - Upload the file using the provided pre-assigned URL via HTTP.
         *
         *     2. **Multi-Part Upload**:
         *        - Upload each file part using the provided URLs (can be done in parallel).
         *        - After all parts are uploaded, complete the upload by calling the [complete](#tag/upload/POST/file/{id}/complete) endpoint with the `uploadId`.
         *
         *     ### Notes
         *
         *     - Pre-assigned URLs are valid for a limited time (usually 1 hour).
         *
         *     ### Limits
         *
         *     - Minimum part size: 5 MiB (does not apply to the last part).
         *     - Maximum part size: 5 GiB.
         *
         */
        post: operations["FileController_createOne"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve File Upload Metadata
         * @description
         *     Retrieves information about a `File Upload` object based on its ID.
         *
         *     ### Usage Scenario
         *
         *     - Use this endpoint to fetch metadata about a specific `File Upload`, such as its name or download link.
         *
         */
        get: operations["FileController_getOne"];
        put?: never;
        post?: never;
        /**
         * Delete File Upload
         * @description
         *     Removes a `File Upload` object and its associated data, including the file itself, from the system.
         *
         *     ### Usage Scenario
         *
         *     - Use this endpoint to permanently delete a file and its upload metadata from xeoStorage.
         *
         *     ### Notes
         *
         *     - This operation is irreversible. Ensure you intend to delete the file before proceeding.
         *     - If the file is in use or referenced elsewhere, consider implementing additional checks before deletion.
         *
         */
        delete: operations["FileController_deleteOne"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/{id}/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Complete Multi-Part Upload
         * @description
         *     Finalizes the multi-part upload process for a file.
         *
         *     ### Usage Scenario
         *
         *     - After uploading all parts using the pre-assigned URLs, call this endpoint to complete the upload.
         *
         *     ### Required Information
         *
         *     - The `uploadId` received when the `File Upload` object was created ([see endpoint](#tag/upload/POST/file/)).
         *     - A list of uploaded parts and their ETags (unique identifiers received after uploading each part).
         *
         *     ### Notes
         *
         *     - This endpoint is only applicable for multi-part uploads.
         *
         */
        post: operations["FileController_completeOne"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/{id}/headers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve File Object Metadata
         * @description
         *     Retrieves metadata of the uploaded file object, such as the content length (file size in bytes).
         *
         *     ### Usage Scenario
         *
         *     - Use this endpoint to obtain information about the uploaded file's size.
         *
         *     ### Notes
         *
         *     - The file must exist; otherwise, an error will be returned.
         *
         */
        get: operations["FileController_getObjectHeaders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * check
         * @description Check the health of the service.
         */
        get: operations["HealthController_check"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UploadUrlType: {
            /**
             * @description The URL to upload the file part
             * @example https://example.com/...
             */
            uploadUrl: string;
            /**
             * @description The part number
             * @example 1
             */
            partNumber: number;
        };
        FileEntryCreateResponse: {
            /**
             * Format: uuid
             * @description The ID of created file upload entry
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * Format: uuid
             * @description The ID of the upload, only for multi-part upload, parts > 1
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            uploadId: string;
            /** @description List of uploadUrls */
            parts: components["schemas"]["UploadUrlType"][];
        };
        FileEntryResponse: {
            /**
             * Format: uuid
             * @description The ID of the process
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /** @description File name */
            name: string;
            /**
             * Format: date-time
             * @description Updated at
             */
            updatedAt: string;
            /**
             * Format: date-time
             * @description Created at
             */
            createdAt: string;
            /**
             * @description Download url
             * @example https://example.com/...
             */
            downloadUrl: string;
        };
        FileEntryCompleteResponse: {
            /**
             * Format: uuid
             * @description The ID of the file upload
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
        };
        FileEntryObjectHeadersResponse: {
            /**
             * @description The length of the file in bytes
             * @example 123456
             */
            contentLength: Record<string, never>;
        };
        FileEntryDeleteResponse: {
            /**
             * @description The number of entries affected
             * @example 1
             */
            affected: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    FileController_createOne: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The name of the file
                     * @example my-file.txt
                     */
                    name: string;
                    /**
                     * @description The number of parts the file is split into when uploading
                     * @example 1
                     */
                    parts: number;
                };
            };
        };
        responses: {
            /** @description Created. Upload prepared. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileEntryCreateResponse"];
                };
            };
        };
    };
    FileController_getOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the `File Upload` */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileEntryResponse"];
                };
            };
        };
    };
    FileController_deleteOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the `File Upload` */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The File Upload has been deleted. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileEntryDeleteResponse"];
                };
            };
        };
    };
    FileController_completeOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The id of the upload, only for multi-part upload, parts > 1 */
                    uploadId: string;
                    /** @description The list of etag for each part */
                    parts: {
                        /** @description The upload url */
                        etag: string;
                        /** @description The part number */
                        partNumber: number;
                    }[];
                };
            };
        };
        responses: {
            /** @description Multi-part upload completed successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileEntryCompleteResponse"];
                };
            };
        };
    };
    FileController_getObjectHeaders: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the `File Upload` */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileEntryObjectHeadersResponse"];
                };
            };
        };
    };
    HealthController_check: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Health Check is successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example ok */
                        status?: string;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       }
                         *     } */
                        info?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        } | null;
                        /** @example {} */
                        error?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        } | null;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       }
                         *     } */
                        details?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        };
                    };
                };
            };
            /** @description The Health Check is not successful */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example error */
                        status?: string;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       }
                         *     } */
                        info?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        } | null;
                        /** @example {
                         *       "redis": {
                         *         "status": "down",
                         *         "message": "Could not connect"
                         *       }
                         *     } */
                        error?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        } | null;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       },
                         *       "redis": {
                         *         "status": "down",
                         *         "message": "Could not connect"
                         *       }
                         *     } */
                        details?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        };
                    };
                };
            };
        };
    };
}
